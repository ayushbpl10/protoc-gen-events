// Code generated by protoc-gen-defaults. DO NOT EDIT.

package eventsval

import "context"
import "encoding/json"
import "go.uber.org/fx"
import "go.appointy.com/google/pb/events"
import "../example/events"

import "github.com/golang/protobuf/ptypes/empty"

import "github.com/ayushbpl10/protoc-gen-events/example/example/pb"

type EventsUsersServer struct {
	pb.UsersServer
	eventsCli events.EventValidatorsClient
	user      event.UserIDer
}

func init() {
	options = append(options, fx.Provide(NewEventsUsersClient))
}

type EventsUsersClientResult struct {
	fx.Out
	UsersClient pb.AcceptancesClient `name:"r"`
}

func NewEventsUsersClient(c events.EventValidatorsClient, s pb.UsersServer) EventsUsersClientResult {
	return EventsUsersClientResult{UsersClient: pb.NewLocalUsersClient(NewEventsUsersServer(c, s))}
}
func NewEventsUsersServer(c events.EventValidatorsClient, s pb.UsersServer, u right.UserIDer) pb.UsersServer {
	return &EventsUsersServer{
		s,
		c,
		u,
	}
}

func (s *EventsUsersServer) AddUser(ctx context.Context, eventsvar *pb.User) (*empty.Empty, error) {

	res := s.UsersServer.AddUser(ctx, eventsvar)

	reqEvent, err := json.Marshal(eventsvar)
	if err != nil {
		return err
	}
	resEvent, err := json.Marshal(res)
	if err != nil {
		return err
	}
	res, err := s.eventsCli.Push(ctx, &events.PushReq{
		Request:  reqEvent,
		Response: resEvent,
		UserId:   s.user.UserID(ctx),
	})
	if err != nil {
		return nil, err
	}

	return res

}

func (s *EventsUsersServer) GetUser(ctx context.Context, eventsvar *pb.GetUserReq) (*pb.User, error) {

	res := s.UsersServer.GetUser(ctx, eventsvar)

	reqEvent, err := json.Marshal(eventsvar)
	if err != nil {
		return err
	}
	resEvent, err := json.Marshal(res)
	if err != nil {
		return err
	}
	res, err := s.eventsCli.Push(ctx, &events.PushReq{
		Request:  reqEvent,
		Response: resEvent,
		UserId:   s.user.UserID(ctx),
	})
	if err != nil {
		return nil, err
	}

	return res

}

func (s *EventsUsersServer) UpdateUser(ctx context.Context, eventsvar *pb.UpdateUserReq) (*empty.Empty, error) {

	res := s.UsersServer.UpdateUser(ctx, eventsvar)

	return res

}
