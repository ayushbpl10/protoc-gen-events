{{- define "File" -}}
// Code generated by protoc-gen-defaults. DO NOT EDIT.

package pb

import  "context"
import	"gitlab.com/appointy/services/protoc-gen-events/example/events"
import	"gitlab.com/appointy/services/protoc-gen-events/example/users"
import	"github.com/golang/protobuf/ptypes"
import	"github.com/golang/protobuf/ptypes/empty"
import	"go.uber.org/fx"

{{ range .Imports }}
import "{{ .}}"
{{ end }}

type NotificationEvent string

{{ range $service := .Services }}

    const (
	    {{ range $rpc := $service.Rpcs }}
	        {{if eq $rpc.Push true}}
	        EVENT_{{$service.ServiceName}}_{{$rpc.RpcName}} NotificationEvent = "{{$rpc.ConstantValue}}"
	        {{end}}
	    {{ end }}
	)


    type Events{{$service.ServiceName}}Server struct {
        {{ .PackageName }}.{{$service.ServiceName}}Server
        eventsCli events.EventValidatorsClient
        user users.UserIDer
    }

    func init() {
        options = append(options, fx.Provide(NewEvents{{$service.ServiceName}}Client))
    }

    type Events{{$service.ServiceName}}ClientResult struct {
        fx.Out
        {{$service.ServiceName}}Client {{ .PackageName }}.{{$service.ServiceName}}Client `name:"r"`
    }

    func NewEvents{{$service.ServiceName}}Client(c events.EventValidatorsClient, s {{ .PackageName }}.{{$service.ServiceName}}Server) Events{{$service.ServiceName}}ClientResult {
        return Events{{$service.ServiceName}}ClientResult{ {{$service.ServiceName}}Client: {{ .PackageName }}.NewLocal{{$service.ServiceName}}Client(NewEvents{{$service.ServiceName}}Server(c, s))}
    }
    func NewEvents{{$service.ServiceName}}Server(c events.EventValidatorsClient, s {{ .PackageName }}.{{$service.ServiceName}}Server, u users.UserIDer) {{ .PackageName }}.{{$service.ServiceName}}Server {
        return &Events{{$service.ServiceName}}Server{
            s,
            c,
            u,
        }
    }

    {{ range $rpc := $service.Rpcs }}
        func (s *Events{{$service.ServiceName}}Server) {{$rpc.RpcName}}(ctx context.Context, eventsvar *{{ $rpc.PackageName }}.{{$rpc.Input}}) ({{if eq $rpc.Output "Empty"}}*empty.{{$rpc.Output}}{{else}}*{{ $rpc.PackageName }}.{{$rpc.Output}}{{end}}, error) {

            res,err := s.{{$service.ServiceName}}Server.{{.RpcName}}(ctx, eventsvar)
            if err != nil{
                return nil, err
            }
            {{if eq $rpc.Push true}}

            	reqEventData, err := ptypes.MarshalAny(&eventsvar)
            	if err != nil {
            		return nil, err
            	}
            	resEventData, err := ptypes.MarshalAny(&res)
            	if err != nil {
            		return nil, err
            	}

            	event := events.PushNotificationEventDataReq {
            		EventType     :      EVENT_{{$service.ServiceName}}_{{$rpc.RpcName}},
            		RequestData   :      reqEventData,
            		ResponseData  :      resEventData,
            		CreatedOn     :      ptypes.TimestampNow(),
            		UserId        :      s.user.UserID(ctx),
            	}

            	res, err := s.eventsCli.Push(ctx, &event)
            	if err != nil {
            		return nil, err
            	}

            {{ end }}

            return res, nil

        }

    {{end}}
{{ end }}

{{end}}
