{{- define "File" -}}
// Code generated by protoc-gen-defaults. DO NOT EDIT.

package eventsval

import "fmt"
import "context"
import "encoding/json"
import "google.golang.org/grpc/codes"
import "google.golang.org/grpc/status"
import "go.uber.org/fx"
import "go.appointy.com/google/pb/events"
import "go.appointy.com/google/userinfo"
import "../example/events"



{{ range .Imports }}
import "{{ .}}"
{{ end }}


{{ range $service := .Services }}



    type Events{{$service.ServiceName}}Server struct {
        {{ .PackageName }}.{{$service.ServiceName}}Server
        eventsCli events.EventValidatorsClient
        user event.UserIDer
    }

    func init() {
        options = append(options, fx.Provide(NewEvents{{$service.ServiceName}}Client))
    }

    type Events{{$service.ServiceName}}ClientResult struct {
        fx.Out
        {{$service.ServiceName}}Client {{ .PackageName }}.AcceptancesClient `name:"r"`
    }

    func NewEvents{{$service.ServiceName}}Client(c events.EventValidatorsClient, s {{ .PackageName }}.{{$service.ServiceName}}Server) Events{{$service.ServiceName}}ClientResult {
        return Events{{$service.ServiceName}}ClientResult{ {{$service.ServiceName}}Client: {{ .PackageName }}.NewLocal{{$service.ServiceName}}Client(NewEvents{{$service.ServiceName}}Server(c, s))}
    }
    func NewEvents{{$service.ServiceName}}Server(c events.EventValidatorsClient, s {{ .PackageName }}.{{$service.ServiceName}}Server, u right.UserIDer) {{ .PackageName }}.{{$service.ServiceName}}Server {
        return &Events{{$service.ServiceName}}Server{
            s,
            c,
            u,
        }
    }

    {{ range $rpc := $service.Rpcs }}
        func (s *Events{{$service.ServiceName}}Server) {{$rpc.RpcName}}(ctx context.Context, eventsvar *{{ $rpc.PackageName }}.{{$rpc.Input}}) ({{if eq $rpc.Output "Empty"}}*empty.{{$rpc.Output}}{{else}}*{{ $rpc.PackageName }}.{{$rpc.Output}}{{end}}, error) {

            res := s.{{$service.ServiceName}}Server.{{.RpcName}}(ctx, eventsvar)

            {{if eq $rpc.Push true}}
            reqEvent, err := json.Marshal(eventsvar)
                if err != nil {
                    return err
                }
            resEvent, err := json.Marshal(res)
                            if err != nil {
                                return err
                            }
            res, err := s.eventsCli.Push(ctx, &events.PushReq{
                            Request         :  reqEvent,
                            Response        :  resEvent,
                            UserId          :  s.user.UserID(ctx),
                        })
                        if err != nil {
                            return nil, err
                        }
            {{ end }}

            return res

        }

    {{end}}
{{ end }}

{{end}}
